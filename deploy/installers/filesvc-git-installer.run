#!/usr/bin/env bash
set -euo pipefail

REPO_URL="https://github.com/sayqow/FeedGenerator.git"
BRANCH="main"
PORT="3001"
SA_JSON=""
WITH_NGINX="0"
DOMAIN=""
EMAIL=""
AUTO_DISCOVER="0"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --repo) REPO_URL="$2"; shift 2;;
    --branch) BRANCH="$2"; shift 2;;
    --port) PORT="$2"; shift 2;;
    --sa-json) SA_JSON="$2"; shift 2;;
    --with-nginx) WITH_NGINX="1"; shift 1;;
    --domain) DOMAIN="$2"; shift 2;;
    --email) EMAIL="$2"; shift 2;;
    --auto-discover) AUTO_DISCOVER="1"; shift 1;;
    --help)
      cat <<EOF
Usage: $0 [options]
  --repo URL            Git repo (default ${REPO_URL})
  --branch NAME         Git branch (default ${BRANCH})
  --port N              Service port (default ${PORT})
  --sa-json PATH        Google Service Account JSON (absolute path)
  --auto-discover       Enable AUTO_DISCOVER_SHEETS=1
  --with-nginx          Install & configure nginx reverse proxy (optional)
  --domain HOST         Domain for nginx (optional)
  --email EMAIL         Email for Let's Encrypt (optional)
EOF
      exit 0;;
    *) echo "[WARN] Unknown arg: $1"; shift;;
  esac
done

echo "[INFO] [1/10] Base packages (no nginx by default)"
export DEBIAN_FRONTEND=noninteractive
apt-get update -y || true
apt-get install -y ca-certificates curl git unzip jq lsb-release || true
dpkg --configure -a || true

echo "[INFO] [2/10] Timezone -> Europe/Moscow"
ln -fs /usr/share/zoneinfo/Europe/Moscow /etc/localtime || true
dpkg-reconfigure -f noninteractive tzdata || true

echo "[INFO] [3/10] Create user & dirs"
id -u filesvc &>/dev/null || useradd -r -m -d /opt/filesvc -s /usr/sbin/nologin filesvc || true
mkdir -p /opt/filesvc /srv/files
chown -R filesvc:filesvc /opt/filesvc /srv/files

echo "[INFO] [4/10] Node.js (LTS 20) + npm"
if ! command -v node >/dev/null 2>&1; then
  curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
  apt-get install -y nodejs
fi
if ! command -v npm >/dev/null 2>&1; then
  apt-get install -y npm || true
fi
echo "[INFO] node=$(node -v) npm=$(npm -v)"

echo "[INFO] [5/10] Fetch project from Git: ${REPO_URL} (${BRANCH})"
if [[ -d /opt/filesvc/.git ]]; then
  git config --global --add safe.directory /opt/filesvc || true
  git -C /opt/filesvc fetch --all
  git -C /opt/filesvc checkout -f "${BRANCH}"
  git -C /opt/filesvc reset --hard "origin/${BRANCH}"
else
  rm -rf /opt/filesvc/*
  git clone --branch "${BRANCH}" "${REPO_URL}" /opt/filesvc
  git config --global --add safe.directory /opt/filesvc || true
fi
chown -R filesvc:filesvc /opt/filesvc

echo "[INFO] [6/10] npm install as 'filesvc' (ci/install + extra deps)"
cd /opt/filesvc
# базовые зависимости проекта
if sudo -u filesvc -H bash -lc 'cd /opt/filesvc && [ -f package-lock.json ]'; then
  sudo -u filesvc -H bash -lc 'cd /opt/filesvc && npm ci --omit=dev'
else
  sudo -u filesvc -H bash -lc 'cd /opt/filesvc && npm install --omit=dev'
fi
# дополнительные либы по требованию
sudo -u filesvc -H bash -lc '
  cd /opt/filesvc
  npm install showdown compression morgan dotenv --omit=dev
'

echo "[INFO] [7/10] .env"
ENV_FILE="/opt/filesvc/.env"
touch "${ENV_FILE}"
grep -q '^PORT=' "${ENV_FILE}" || echo "PORT=${PORT}" >> "${ENV_FILE}"
grep -q '^FILES_DIR=' "${ENV_FILE}" || echo "FILES_DIR=/srv/files" >> "${ENV_FILE}"
if [[ -n "${SA_JSON}" ]]; then
  if [[ -f "${SA_JSON}" ]]; then
    grep -q '^GOOGLE_APPLICATION_CREDENTIALS=' "${ENV_FILE}" || echo "GOOGLE_APPLICATION_CREDENTIALS=${SA_JSON}" >> "${ENV_FILE}"
  else
    echo "[WARN] SA JSON not found: ${SA_JSON}"
  fi
fi
if [[ "${AUTO_DISCOVER}" == "1" ]]; then
  grep -q '^AUTO_DISCOVER_SHEETS=' "${ENV_FILE}" || echo "AUTO_DISCOVER_SHEETS=1" >> "${ENV_FILE}"
fi
grep -q '^SHEET_SETTINGS='   "${ENV_FILE}" || echo "SHEET_SETTINGS=Настройки"   >> "${ENV_FILE}"
grep -q '^SHEET_CATEGORIES=' "${ENV_FILE}" || echo "SHEET_CATEGORIES=Категории" >> "${ENV_FILE}"
grep -q '^SHEET_PRODUCTS='   "${ENV_FILE}" || echo "SHEET_PRODUCTS=Товары"      >> "${ENV_FILE}"
chown filesvc:filesvc "${ENV_FILE}"
chmod 600 "${ENV_FILE}"

echo "[INFO] [8/10] systemd unit"
UNIT=/etc/systemd/system/filesvc.service
cat > "${UNIT}" <<EOF
[Unit]
Description=Node File Server + YML generator
After=network-online.target
Wants=network-online.target

[Service]
EnvironmentFile=/opt/filesvc/.env
WorkingDirectory=/opt/filesvc
ExecStart=/usr/bin/node /opt/filesvc/server.js
Restart=always
User=filesvc
Group=filesvc
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable filesvc
systemctl restart filesvc || (journalctl -u filesvc -n 200 --no-pager; exit 1)

# ── опциональный nginx ─────────────────────────────────────────────
if [[ "${WITH_NGINX}" == "1" ]]; then
  echo "[INFO] [9/10] nginx reverse proxy"
  apt-get install -y nginx || true
  cat > /etc/nginx/sites-available/filesvc.conf <<NGX
server {
  listen 80;
  ${DOMAIN:+server_name ${DOMAIN};}
  location / {
    proxy_set_header Host \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_pass http://127.0.0.1:${PORT};
  }
}
NGX
  ln -sf /etc/nginx/sites-available/filesvc.conf /etc/nginx/sites-enabled/filesvc.conf
  nginx -t
  systemctl enable nginx
  systemctl restart nginx || true
fi

# ── UFW ────────────────────────────────────────────────────────────
echo "[INFO] [10/10] UFW rules (open SSH + ${PORT} ${WITH_NGINX:++ nginx})"
if ! command -v ufw >/dev/null 2>&1; then
  apt-get install -y ufw || true
fi

# текущий SSH порт
SSH_PORT="$(ss -ltnp 2>/dev/null | awk '/sshd/ && /LISTEN/ {print $4}' | sed -n 's/.*:\([0-9]\+\)$/\1/p' | head -n1)"
if [[ -z "${SSH_PORT}" ]]; then SSH_PORT="22"; fi

# включать UFW безопасно
ufw status | grep -q "Status: active" || {
  ufw default deny incoming || true
  ufw default allow outgoing || true
  ufw allow "${SSH_PORT}/tcp" || true
  ufw allow "${PORT}/tcp" || true
  if [[ "${WITH_NGINX}" == "1" ]]; then
    ufw allow 'Nginx Full' || true
  fi
  yes | ufw enable || true
}

# если UFW уже активен — убедимся, что правила есть
ufw status | grep -qE "( ${PORT}/tcp)" || ufw allow "${PORT}/tcp" || true
ufw status | grep -qE "( ${SSH_PORT}/tcp)" || ufw allow "${SSH_PORT}/tcp" || true
if [[ "${WITH_NGINX}" == "1" ]]; then
  ufw status | grep -q "Nginx Full" || ufw allow 'Nginx Full' || true
fi

echo
echo "[OK] Done. Check:"
echo "  systemctl status filesvc --no-pager"
echo "  curl http://127.0.0.1:${PORT}/file/"
echo
